
  let s:background = get(s:palette, 'color00') + ['Black']
  let s:negative   = get(s:palette, 'color01') + ['DarkRed']
  let s:positive   = get(s:palette, 'color02') + ['DarkGreen']
  let s:olive      = get(s:palette, 'color03') + ['DarkYellow'] " string
  let s:neutral    = get(s:palette, 'color04') + ['DarkBlue']
  let s:comment    = get(s:palette, 'color05') + ['DarkMagenta']
  let s:navy       = get(s:palette, 'color06') + ['DarkCyan'] " storageclass
  let s:foreground = get(s:palette, 'color07') + ['LightGray']

  let s:nontext    = get(s:palette, 'color08') + ['DarkGray']
  let s:red        = get(s:palette, 'color09') + ['LightRed'] " import / try/catch
  let s:pink       = get(s:palette, 'color10') + ['LightGreen'] " statement, type
  let s:purple     = get(s:palette, 'color11') + ['LightYellow'] " if / conditional
  let s:accent     = get(s:palette, 'color12') + ['LightBlue']
  let s:orange     = get(s:palette, 'color13') + ['LightMagenta'] " number
  let s:blue       = get(s:palette, 'color14') + ['LightCyan'] " other keyword
  let s:highlight  = get(s:palette, 'color15') + ['White']

  let s:transparent = [s:background[0], 'none', 'none']
  " EXTENDED COLORS:
  " From here on, all colors are optional and must have default values (3rd parameter of the
  " `get` command) that point to the above basic colors in case the target theme doesn't
  " provide the extended colors. The default values should be reasonably sensible.
  " The terminal color must be provided also.

  let s:aqua       = get(s:palette, 'color16', get(s:palette, 'color14')) + ['LightCyan']
  let s:green      = get(s:palette, 'color17', get(s:palette, 'color13')) + ['LightMagenta']
  let s:wine       = get(s:palette, 'color18', get(s:palette, 'color11')) + ['LightYellow']

  " LineNumber: when set number
  let s:linenumber_fg  = get(s:palette, 'linenumber_fg', get(s:palette, 'color08')) + ['DarkGray']
  let s:linenumber_bg  = get(s:palette, 'linenumber_bg', get(s:palette, 'color00')) + ['Black']

  " Vertical Split: when there are more than 1 window side by side, ex: <C-W><C-V>
  let s:vertsplit_fg = get(s:palette, 'vertsplit_fg', get(s:palette, 'color15')) + ['White']
  let s:vertsplit_bg = get(s:palette, 'vertsplit_bg', get(s:palette, 'color00')) + ['Black']

  " Statusline: when set status=2
  let s:statusline_active_fg   = get(s:palette, 'statusline_active_fg', get(s:palette, 'color00')) + ['Black']
  let s:statusline_active_bg   = get(s:palette, 'statusline_active_bg', get(s:palette, 'color15')) + ['White']
  let s:statusline_inactive_fg = get(s:palette, 'statusline_inactive_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:statusline_inactive_bg = get(s:palette, 'statusline_inactive_bg', get(s:palette, 'color08')) + ['DarkGray']


  " Cursor: in normal mode
  let s:cursor_fg = get(s:palette, 'cursor_fg', get(s:palette, 'color00')) + ['Black']
  let s:cursor_bg = get(s:palette, 'cursor_bg', get(s:palette, 'color07')) + ['LightGray']

  let s:cursorline   = get(s:palette, 'cursorline', get(s:palette, 'color00')) + ['Black']

  " CursorColumn: when set cursorcolumn
  let s:cursorcolumn = get(s:palette, 'cursorcolumn', get(s:palette, 'color00')) + ['Black']

  " CursorLine Number: when set cursorline number
  let s:cursorlinenr_fg = get(s:palette, 'cursorlinenr_fg', get(s:palette, 'color13')) + ['LightMagenta']
  let s:cursorlinenr_bg = get(s:palette, 'cursorlinenr_bg', get(s:palette, 'color00')) + ['Black']

  " Popup Menu: when <C-X><C-N> for autocomplete
  let s:popupmenu_fg = get(s:palette, 'popupmenu_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:popupmenu_bg = get(s:palette, 'popupmenu_bg', get(s:palette, 'color08')) + ['DarkGray']

  " Search: ex: when * on a word
  let s:search_fg = get(s:palette, 'search_fg', get(s:palette, 'color00')) + ['Black']
  let s:search_bg = get(s:palette, 'search_bg', get(s:palette, 'color15')) + ['White']

  " Todo: ex: TODO
  let s:todo_fg    = get(s:palette, 'todo_fg', get(s:palette, 'color05')) + ['LightYellow']
  let s:todo_bg    = get(s:palette, 'todo_bg', get(s:palette, 'color00')) + ['Black']

  " Error: ex: turn spell on and have invalid words
  let s:error_fg      = get(s:palette, 'error_fg', get(s:palette, 'color01')) + ['DarkRed']
  let s:error_bg      = get(s:palette, 'error_bg', get(s:palette, 'color00')) + ['Black']

  " Match Parenthesis: selecting an opening/closing pair and the other one will be highlighted
  let s:matchparen_fg = get(s:palette, 'matchparen_fg', get(s:palette, 'color00')) + ['LightMagenta']
  let s:matchparen_bg = get(s:palette, 'matchparen_bg', get(s:palette, 'color05')) + ['Black']

  " Visual:
  let s:visual_fg = get(s:palette, 'visual_fg', get(s:palette, 'color08')) + ['White']
  let s:visual_bg = get(s:palette, 'visual_bg', get(s:palette, 'color07')) + ['Black']

  " Folded:
  let s:folded_fg = get(s:palette, 'folded_fg', get(s:palette, 'color00')) + ['Black']
  let s:folded_bg = get(s:palette, 'folded_bg', get(s:palette, 'color05')) + ['DarkYellow']

  " WildMenu: Autocomplete command, ex: :color <tab><tab>
  let s:wildmenu_fg  = get(s:palette, 'wildmenu_fg', get(s:palette, 'color00')) + ['Black']
  let s:wildmenu_bg  = get(s:palette, 'wildmenu_bg', get(s:palette, 'color06')) + ['LightGray']

  " Spelling: when spell on and there are spelling problems like this for example: papercolor. a vim color scheme
  let s:spellbad   = get(s:palette, 'spellbad', get(s:palette, 'color04')) + ['DarkRed']
  let s:spellcap   = get(s:palette, 'spellcap', get(s:palette, 'color05')) + ['DarkMagenta']
  let s:spellrare  = get(s:palette, 'spellrare', get(s:palette, 'color06')) + ['DarkYellow']
  let s:spelllocal = get(s:palette, 'spelllocal', get(s:palette, 'color01')) + ['DarkBlue']

  " Diff:
  let s:diffadd_fg    = get(s:palette, 'diffadd_fg', get(s:palette, 'color00')) + ['Black']
  let s:diffadd_bg    = get(s:palette, 'diffadd_bg', get(s:palette, 'color02')) + ['DarkGreen']

  let s:diffdelete_fg = get(s:palette, 'diffdelete_fg', get(s:palette, 'color00')) + ['Black']
  let s:diffdelete_bg = get(s:palette, 'diffdelete_bg', get(s:palette, 'color04')) + ['DarkRed']

  let s:difftext_fg   = get(s:palette, 'difftext_fg', get(s:palette, 'color00')) + ['Black']
  let s:difftext_bg   = get(s:palette, 'difftext_bg', get(s:palette, 'color06')) + ['DarkYellow']

  let s:diffchange_fg = get(s:palette, 'diffchange_fg', get(s:palette, 'color00')) + ['Black']
  let s:diffchange_bg = get(s:palette, 'diffchange_bg', get(s:palette, 'color14')) + ['LightYellow']

  " Tabline: when having tabs, ex: :tabnew
  let s:tabline_bg          = get(s:palette, 'tabline_bg', get(s:palette, 'color00')) + ['Black']
  let s:tabline_active_fg   = get(s:palette, 'tabline_active_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:tabline_active_bg   = get(s:palette, 'tabline_active_bg', get(s:palette, 'color00')) + ['Black']
  let s:tabline_inactive_fg = get(s:palette, 'tabline_inactive_fg', get(s:palette, 'color07')) + ['Black']
  let s:tabline_inactive_bg = get(s:palette, 'tabline_inactive_bg', get(s:palette, 'color08')) + ['DarkMagenta']

  " Plugin: BufTabLine https://github.com/ap/vim-buftabline
  let s:buftabline_bg          = get(s:palette, 'buftabline_bg', get(s:palette, 'color00')) + ['Black']
  let s:buftabline_current_fg  = get(s:palette, 'buftabline_current_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:buftabline_current_bg  = get(s:palette, 'buftabline_current_bg', get(s:palette, 'color05')) + ['DarkMagenta']
  let s:buftabline_active_fg   = get(s:palette, 'buftabline_active_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:buftabline_active_bg   = get(s:palette, 'buftabline_active_bg', get(s:palette, 'color12')) + ['LightBlue']
  let s:buftabline_inactive_fg = get(s:palette, 'buftabline_inactive_fg', get(s:palette, 'color07')) + ['LightGray']
  let s:buftabline_inactive_bg = get(s:palette, 'buftabline_inactive_bg', get(s:palette, 'color00')) + ['Black']
